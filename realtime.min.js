"use strict";function Realtime(sock,WEBRTC){const rtc=WEBRTC(sock.send);rtc.onState((conn,state)=>{onMessage&&"function"==typeof onMessage&&onMessage({type:"webrtc",conn:conn,state:state})});let onMessage=null;return sock.onState(s=>{"connected"===s&&(onMessage&&"function"==typeof onMessage&&onMessage({type:"connected"}),sock.send({type:"whoami"})),"disconnected"===s&&onMessage&&"function"==typeof onMessage&&onMessage({type:"disconnected"})}),sock.onError(err=>{onMessage&&"function"==typeof onMessage&&onMessage(err)}),sock.onMessage(async m=>{if(onMessage&&"function"==typeof onMessage&&onMessage(m),"answer"===m.type)return rtc.gotAnswer(m);m.error&&onMessage&&"function"==typeof onMessage&&onMessage(m)}),{onMessage:cb=>{onMessage=cb},connect:()=>{sock.connect()},close:()=>{sock.close()},whoami:()=>{sock.send({type:"whoami"})},join:room=>{sock.send({type:"join",room:room})},leave:room=>{sock.send({type:"leave",room:room})},chat:(room,message)=>{sock.send({type:"chat",room:room,chat:message})},message:(to,message)=>{sock.send({type:"message",to:to,message:message})},call:async(to,stream=null)=>rtc.call(to,stream),answer:async(call,stream)=>rtc.answer(call),users:()=>{sock.send({type:"users"})},rooms:()=>{sock.send({type:"rooms"})},room:room=>{sock.send({type:"room",room:room})},calls:rtc.calls,rtc:rtc,sock:sock}}